/*
 * Пустой модуль SRC Repair.
 * 
 * Copyright 2011 EasyCoding Team (ECTeam).
 * Copyright 2005 - 2011 EasyCoding Team.
 * 
 * Лицензия: GPL v3 (см. файл GPL.txt).
 * Лицензия контента: Creative Commons 3.0 BY.
 * 
 * Запрещается использовать этот файл при использовании любой
 * лицензии, отличной от GNU GPL версии 3 и с ней совместимой.
 * 
 * Официальный блог EasyCoding Team: http://www.easycoding.org/
 * Официальная страница проекта: http://www.easycoding.org/projects/srcrepair
 * 
 * Более подробная инфорация о программе в readme.txt,
 * о лицензии - в GPL.txt.
*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.Win32;
using System.IO;
using System.Diagnostics;

namespace srcrepair
{
    public partial class frmHEd : Form
    {
        public frmHEd()
        {
            InitializeComponent();
        }

        private const string PluginName = "Advanced Hosts Editor";
        
        private string HostsFilePath = "";

        private void ReadHostsToTable(string FilePath)
        {
            // Очистим таблицу...
            HEd_Table.Rows.Clear();

            // Начинаем считывать и парсить содержимое файла...
            string ImpStr; // Строка для парсинга...
            string Buf; // Буферная переменная...            
            using (StreamReader OpenedHosts = new StreamReader(@FilePath, Encoding.Default))
            {
                while (OpenedHosts.Peek() >= 0)
                {
                    // Начинаем...
                    ImpStr = OpenedHosts.ReadLine(); // считали строку...
                    ImpStr = ImpStr.Trim(); // почистим строку от лишних пробелов...
                    // Начинаем парсить считанную строку...
                    if (!(String.IsNullOrEmpty(ImpStr))) // проверяем, не пустая ли строка...
                    {
                        if (ImpStr[0] != '#') // проверяем, не комментарий ли...
                        {
                            // Ищем символ табуляции и заменим его на пробел...
                            while (ImpStr.IndexOf("\t") != -1)
                            {
                                ImpStr = ImpStr.Replace("\t", " ");
                            }

                            // Удалим все лишние пробелы...
                            while (ImpStr.IndexOf("  ") != -1) // пока остались двойные пробелы, продолжаем...
                            {
                                ImpStr = ImpStr.Replace("  ", " "); // удаляем найденный лишний пробел...
                            }

                            // Строка почищена, продолжаем...
                            if (ImpStr.IndexOf(" ") != -1)
                            {
                                Buf = ImpStr.Substring(0, ImpStr.IndexOf(" ")); // мы получили IP-адрес...
                                ImpStr = ImpStr.Remove(0, ImpStr.IndexOf(" ") + 1); // удаляем полученное на предыдущем шаге...
                                HEd_Table.Rows.Add(Buf, ImpStr); // записываем в таблицу...
                            }
                        }
                    }
                }
            }
        }

        private void WriteTableToHosts(string Path)
        {
            using (StreamWriter CFile = new StreamWriter(Path))
            {
                CFile.WriteLine("# Copyright (c) 1993-2009 Microsoft Corp.");
                CFile.WriteLine("#");
                CFile.WriteLine(String.Format("# Generated by {0} ({1})", GV.AppName, PluginName));
                CFile.WriteLine("#");
                CFile.WriteLine("# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.");
                CFile.WriteLine("#");
                CFile.WriteLine("# This file contains the mappings of IP addresses to host names. Each");
                CFile.WriteLine("# entry should be kept on an individual line. The IP address should");
                CFile.WriteLine("# be placed in the first column followed by the corresponding host name.");
                CFile.WriteLine("# The IP address and the host name should be separated by at least one");
                CFile.WriteLine("# space.");
                CFile.WriteLine("#");
                CFile.WriteLine("# Additionally, comments (such as these) may be inserted on individual");
                CFile.WriteLine("# lines or following the machine name denoted by a ‘#’ symbol.");
                CFile.WriteLine("#");
                CFile.WriteLine("# For example:");
                CFile.WriteLine("#");
                CFile.WriteLine("# 102.54.94.97 rhino.acme.com # source server");
                CFile.WriteLine("# 38.25.63.10 x.acme.com # x client host");
                CFile.WriteLine("");
                CFile.WriteLine("# localhost name resolution is handled within DNS itself.");
                CFile.WriteLine("# 127.0.0.1 localhost");
                CFile.WriteLine("# ::1 localhost");
                CFile.WriteLine("");
                for (int i = 0; i < HEd_Table.Rows.Count - 1; i++)
                {
                    if ((HEd_Table.Rows[i].Cells[0].Value != null) && (HEd_Table.Rows[i].Cells[1].Value != null))
                    {
                        CFile.Write(HEd_Table.Rows[i].Cells[0].Value.ToString());
                        CFile.Write(" ");
                        CFile.WriteLine(HEd_Table.Rows[i].Cells[1].Value.ToString());
                    }
                }
                CFile.Close();
            }
        }
        
        private void frmHEd_Load(object sender, EventArgs e)
        {
            // Проверим наличие прав админа...

            // Получим путь к файлу hosts (вдруг он переопределён каким-либо зловредом)...
            try
            {
                RegistryKey ResKey = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Services\Tcpip\Parameters", false);
                if (ResKey != null)
                {
                    HostsFilePath = (string)ResKey.GetValue("DataBasePath");
                }
            }
            catch
            {
                // Произошло исключение, поэтому укажем вручную...
                HostsFilePath = @"%SystemRoot%\System32\drivers\etc";
            }

            // Сгенерируем полный путь к файлу hosts...
            HostsFilePath = frmMainW.IncludeTrDelim(HostsFilePath) + "hosts";

            // Считаем содержимое...
            try
            {
                ReadHostsToTable(HostsFilePath);
            }
            catch
            {
                MessageBox.Show(String.Format(frmMainW.RM.GetString("AHE_ExceptionDetected"), HostsFilePath), PluginName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void HEd_T_Refresh_Click(object sender, EventArgs e)
        {
            try
            {
                ReadHostsToTable(HostsFilePath);
            }
            catch
            {
                MessageBox.Show(String.Format(frmMainW.RM.GetString("AHE_ExceptionDetected"), HostsFilePath), PluginName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void HEd_T_Save_Click(object sender, EventArgs e)
        {
            // Сохраняем файл...
            try
            {
                WriteTableToHosts(HostsFilePath);
                MessageBox.Show(frmMainW.RM.GetString("AHE_Saved"), PluginName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show(String.Format(frmMainW.RM.GetString("AHE_SaveException"), HostsFilePath), PluginName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void HEd_M_Quit_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void HEd_M_HBack_Click(object sender, EventArgs e)
        {
            // BackUp
        }

        private void HEd_M_RestDef_Click(object sender, EventArgs e)
        {
            // Restore default
            DialogResult UserConfirmation = MessageBox.Show(frmMainW.RM.GetString("AHE_RestDef"), PluginName, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (UserConfirmation == DialogResult.Yes)
            {
                HEd_Table.Rows.Clear();
                HEd_Table.Rows.Add("127.0.0.1", "localhost");
                HEd_T_Save.PerformClick();
            }
        }

        private void HEd_M_OnlHelp_Click(object sender, EventArgs e)
        {
            Process.Start(String.Format("http://code.google.com/p/srcrepair/wiki/HostsEditorPlugin_{0}", frmMainW.RM.GetString("AppLangPrefix")));
        }

        private void HEd_M_About_Click(object sender, EventArgs e)
        {
            MessageBox.Show(String.Format("Advanced Hosts Editor plugin for {0} by {1}. Version: {2}.", GV.AppName, "V1TSK", "1.0a"), PluginName, MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void HEd_T_RemRw_Click(object sender, EventArgs e)
        {
            try
            {
                if (HEd_Table.Rows.Count > 0)
                {
                    HEd_Table.Rows.Remove(HEd_Table.CurrentRow);
                }
            }
            catch
            {
                // Подавляем возможные сообщения об ошибках...
            }
        }
    }
}
